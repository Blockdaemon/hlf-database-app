name: "{{env['NETWORK'] or "some-network"}}"
version: 1.0.0

client:

  organization: {{env['SUBORGNAME']}}

  logging:
    level: info

  # Root of the MSP directories with keys and certs.
  cryptoconfig:
    path: {{env['CRYPTO']}}

  # Some SDKs support pluggable KV stores, the properties under "credentialStore"
  # are implementation specific
  credentialStore:
    path: {{env['HOME']}}/.hlf-database-app/store

    # [Optional]. Specific to the CryptoSuite implementation used by GO SDK. Software-based implementations
    # requiring a key store. PKCS#11 based implementations does not.
    cryptoStore:
      path: {{env['HOME']}}/.hlf-database-app/msp

#
# [Optional]. But most apps would have this section so that channel objects can be constructed
# based on the content below. If an app is creating channels, then it likely will not need this
# section.
#
channels:
  # name of the channel
  {{env['CHANNEL'] or "channel"}}:
    # Required. list of peers from participating orgs
    peers:
      peer0.{{env['SUBDOMAIN']}}.{{env['DOMAIN'] or "local"}}:
      peer1.{{env['SUBDOMAIN']}}.{{env['DOMAIN'] or "local"}}:

#
# list of participating organizations in this network
#
organizations:
# peer org
  {{env['SUBORGNAME']}}:
    mspid: {{env['SUBDOMAIN']}}.{{env['DOMAIN'] or "local"}}
    cryptoPath: peerOrganizations/{{env['SUBDOMAIN']}}.{{env['DOMAIN'] or "local"}}/users/{userName}@{{env['SUBDOMAIN']}}.{{env['DOMAIN'] or "local"}}/msp
    peers:
      - peer0.{{env['SUBDOMAIN']}}.{{env['DOMAIN'] or "local"}}
      - peer1.{{env['SUBDOMAIN']}}.{{env['DOMAIN'] or "local"}}

    # [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based
    # network. Typically certificates provisioning is done in a separate process outside of the
    # runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for
    # dynamic certificate management (enroll, revoke, re-enroll). The following section is only for
    # Fabric-CA servers.
    certificateAuthorities:
      - ca.{{env['SUBDOMAIN']}}.{{env['DOMAIN'] or "local"}}

# orderer org
# {{env['ORGNAME']}}:
#   mspid: {{env['DOMAIN'] or "local"}}
#   cryptoPath: ordererOrganizations/{{env['DOMAIN'] or "local"}}/users/{userName}@{{env['DOMAIN'] or "local"}}/msp
#   peers:
#     - peer0.{{env['SUBDOMAIN']}}.{{env['DOMAIN'] or "local"}}
#     - peer1.{{env['SUBDOMAIN']}}.{{env['DOMAIN'] or "local"}}
#   certificateAuthorities:
#     - ca.{{env['SUBDOMAIN']}}.{{env['DOMAIN'] or "local"}}

#
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:
  orderer0.{{env['DOMAIN'] or "local"}}:

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
      ssl-target-name-override: orderer0.{{env['DOMAIN'] or "local"}}

    tlsCACerts:
      # Certificate location absolute path
      path: {{env['CRYPTO']}}/ordererOrganizations/{{env['DOMAIN'] or "local"}}/tlsca/tlsca.{{env['DOMAIN'] or "local"}}-cert.pem

#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:
  peer0.{{env['SUBDOMAIN']}}.{{env['DOMAIN'] or "local"}}:

    grpcOptions:
      ssl-target-name-override: peer0.{{env['SUBDOMAIN']}}.{{env['DOMAIN'] or "local"}}

    tlsCACerts:
      # Certificate location absolute path
      path: {{env['CRYPTO']}}/peerOrganizations/{{env['SUBDOMAIN']}}.{{env['DOMAIN'] or "local"}}/tlsca/tlsca.{{env['SUBDOMAIN']}}.{{env['DOMAIN'] or "local"}}-cert.pem

  peer1.{{env['SUBDOMAIN']}}.{{env['DOMAIN'] or "local"}}:
    grpcOptions:
      ssl-target-name-override: peer1.{{env['SUBDOMAIN']}}.{{env['DOMAIN'] or "local"}}

    tlsCACerts:
      # Certificate location absolute path
      path: {{env['CRYPTO']}}/peerOrganizations/{{env['SUBDOMAIN']}}.{{env['DOMAIN'] or "local"}}/tlsca/tlsca.{{env['SUBDOMAIN']}}.{{env['DOMAIN'] or "local"}}-cert.pem

#
# Fabric-CA is a special kind of Certificate Authority provided by Hyperledger Fabric which allows
# certificate management to be done via REST APIs. Application may choose to use a standard
# Certificate Authority instead of Fabric-CA, in which case this section would not be specified.
#
certificateAuthorities:
  ca.{{env['SUBDOMAIN']}}.{{env['DOMAIN'] or "local"}}:
    # Fabric-CA supports dynamic user enrollment via REST APIs. A "root" user, a.k.a registrar, is
    # needed to enroll and invoke new users.
    httpOptions:
      verify: false
    registrar:
      # as specified in `fabric-ca-server start -b ...`
      # (see docker-compose.yaml in hlf-service-network)
      enrollId: admin
      enrollSecret: adminpw
    # [Optional] The optional name of the CA.
    caName: ca.{{env['SUBDOMAIN']}}.{{env['DOMAIN'] or "local"}}
    tlsCACerts:
      # Certificate location absolute path
      path: {{env['CRYPTO']}}/peerOrganizations/{{env['SUBDOMAIN']}}.{{env['DOMAIN'] or "local"}}/ca/ca.{{env['SUBDOMAIN']}}.{{env['DOMAIN'] or "local"}}-cert.pem

entityMatchers:
  peer:
    - pattern: (\w*)peer0.{{env['SUBDOMAIN']}}.{{env['DOMAIN'] or "local"}}(\w*)
      urlSubstitutionExp: localhost:7051
      eventUrlSubstitutionExp: localhost:7053
      sslTargetOverrideUrlSubstitutionExp: peer0.{{env['SUBDOMAIN']}}.{{env['DOMAIN'] or "local"}}
      mappedHost: peer0.{{env['SUBDOMAIN']}}.{{env['DOMAIN'] or "local"}}

    - pattern: (\w*)peer1.{{env['SUBDOMAIN']}}.{{env['DOMAIN'] or "local"}}(\w*)
      urlSubstitutionExp: localhost:8051
      eventUrlSubstitutionExp: localhost:8053
      sslTargetOverrideUrlSubstitutionExp: peer1.{{env['SUBDOMAIN']}}.{{env['DOMAIN'] or "local"}}
      mappedHost: peer1.{{env['SUBDOMAIN']}}.{{env['DOMAIN'] or "local"}}

  orderer:
    - pattern: (\w*)orderer0.{{env['DOMAIN'] or "local"}}(\w*)
      urlSubstitutionExp: localhost:7050
      sslTargetOverrideUrlSubstitutionExp: orderer0.{{env['DOMAIN'] or "local"}}
      mappedHost: orderer0.{{env['DOMAIN'] or "local"}}

  certificateAuthorities:
    - pattern: (\w*)ca.{{env['SUBDOMAIN']}}.{{env['DOMAIN'] or "local"}}(\w*)
      urlSubstitutionExp: http://localhost:7054
      mappedHost: ca.{{env['SUBDOMAIN']}}.{{env['DOMAIN'] or "local"}}
